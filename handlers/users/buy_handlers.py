import re
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State

from utils.db_api.db_commands import get_name_item
from utils.db_api.sql_db import sql_read_orders, sql_add_orders
from loader import dp, bot


class FSMDilivery(StatesGroup):
    product = State()
    name = State()
    number = State()
    volume = State()
    time = State()


@dp.callback_query_handler(Text(startswith='buy'), state=None)
async def callback_client(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –°–î–ï–õ–ê–¢–¨ –ü–†–ï–î–ó–ê–ö–ê–ó')
    name = await get_name_item(int(callback_query.data.replace('buy', '').split(':')[1]))
    await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {name}.\n –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n–ß—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ '/cancel'")
    async with state.proxy() as data:
        data['product'] = name
    await FSMDilivery.number.set()
    await bot.send_message(callback_query.from_user.id, '–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    # await bot.send_message(admin_id, f'–ü—Ä–∏–Ω—è—Ç –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.username}/–Ω–æ–º–µ—Ä:')


@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_orders(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω')


# @dp.message_handler(state=FSMDilivery.name)
# async def chenge_name(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['name'] = message.text
#     await FSMDilivery.next()
#     await message.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n(–ù–µ –æ—à–∏–±–∏—Å—å!)')


@dp.message_handler(state=FSMDilivery.number)
async def chenge_number(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [KeyboardButton(text=f"{i}–ª.") for i in range(1, 6)]
    if not re.match(r'^(\+375|80)(29|25|44|33)(\d{3})(\d{2})(\d{2})$', message.text):
        await message.reply('–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    else:
        async with state.proxy() as data:
            data['name'] = message.from_user.full_name
            data['number'] = message.text
        await FSMDilivery.next()
        await message.reply('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ–±—ä–µ–º –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω—É–∂–µ–Ω!\n'
                            '–ò–ª–∏ –≤–≤–µ–¥–∏ —Å–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. \n'
                            '–í–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –ª–∏—Ç—Ä–æ–≤!', reply_markup=markup.add(*buttons))


@dp.message_handler(state=FSMDilivery.volume)
async def chenge_vilume(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardRemove()
    if not re.match(r'^\d{1,2}–ª\.$', message.text):
        await message.reply('–¢—ã –≤–≤–µ–ª –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã!')
    else:
        async with state.proxy() as data:
            data['volume'] = message.text

    await FSMDilivery.next()
    await message.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞—Å –∂–¥–∞—Ç—å!', reply_markup=markup)


@dp.message_handler(state=FSMDilivery.time)
async def chenge_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['time'] = message.text

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()

    # await sql_add_orders(state)
    await sql_read_orders(message, state_data)
    await state.finish()
    await message.answer(f'–ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.\n'
                         f'–í—ã –≤—ã–±—Ä–∞–ª–∏:\n{state_data["product"]} ({state_data["volume"]})\n'
                         f'–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ {state_data["time"]}\n'
                         f'–ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ –∏ –∑–∞–±–∏—Ä–∞–π—Ç–µ —Å–≤–æ–π —Ö–æ–ª–æ–¥–Ω–µ–Ω—å–∫–∏–π –∑–∞–∫–∞–∑ üòâ!')
